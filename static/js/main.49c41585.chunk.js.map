{"version":3,"sources":["components/Movie.js","components/MovieList.js","App.js","serviceWorker.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","map","genre","idx","key","slice","prototype","PropTypes","number","string","arrayOf","MovieList","props","getMovieData","a","axios","get","movies","data","setState","isLoading","state","this","medium_cover_image","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUAIMA,G,MAAQ,SAAC,GAAD,EAAGC,GAAH,IAAOC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,OAAQC,EAArC,EAAqCA,OAArC,OACZ,yBAAKC,UAAU,SACb,yBAAKA,UAAU,SACb,yBAAKC,IAAKH,KAEZ,yBAAKE,UAAU,QACb,4BAAKJ,GACL,4BAAKD,GACL,wBAAIK,UAAU,UACXD,GAAUA,EAAOG,KAAI,SAACC,EAAOC,GAAR,OAAgB,wBAAIC,IAAKD,GAAMD,OAEvD,qCAAON,EAAQS,MAAM,EAAG,KAAxB,YAKNb,EAAMc,UAAY,CAChBb,GAAIc,IAAUC,OACdd,KAAMa,IAAUC,OAChBb,MAAOY,IAAUE,OACjBb,QAASW,IAAUE,OACnBZ,OAAQU,IAAUE,OAClBX,OAAQS,IAAUG,QAAQH,IAAUE,SAGvBjB,QC4BAmB,E,kDAnDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,aAbmB,sBAaJ,8BAAAC,EAAA,sEACgCC,IAAMC,IAAI,0CAD1C,gBACWC,EADX,EACLC,KAAQA,KAAQD,OACxB,EAAKE,SAAS,CACZF,SACAG,WAAW,IAJA,2CAVb,EAAKC,MAAQ,CACXD,WAAW,EACXH,OAAQ,IALO,E,gEAUjBK,KAAKT,iB,+BAWG,IAAD,EACuBS,KAAKD,MAA3BD,EADD,EACCA,UAAWH,EADZ,EACYA,OACnB,OACE,6BAASlB,UAAU,aAChBqB,EACC,yBAAKrB,UAAU,WACb,0BAAMA,UAAU,iBAAhB,0BAKF,yBAAKA,UAAU,UACZkB,EAAOhB,KAAI,SAAAiB,GAAI,OACd,kBAAC,EAAD,CACEd,IAAKc,EAAKzB,GACVA,GAAIyB,EAAKzB,GACTC,KAAMwB,EAAKxB,KACXC,MAAOuB,EAAKvB,MACZC,QAASsB,EAAKtB,QACdC,OAAQqB,EAAKK,mBACbzB,OAAQoB,EAAKpB,kB,GA1CL0B,IAAMC,WCMfC,MARf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCMc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.49c41585.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\n\nconst Movie = ({ id, year, title, summary, poster, genres }) => (\n  <div className=\"movie\">\n    <div className=\"image\">\n      <img src={poster} />\n    </div>\n    <div className=\"text\">\n      <h3>{title}</h3>\n      <h5>{year}</h5>\n      <ul className=\"genres\">\n        {genres && genres.map((genre, idx) => <li key={idx}>{genre}</li>)}\n      </ul>\n      <p>{`${summary.slice(0, 180)}...`}</p>\n    </div>\n  </div>\n)\n\nMovie.prototype = {\n  id: PropTypes.number,\n  year: PropTypes.number,\n  title: PropTypes.string,\n  summary: PropTypes.string,\n  poster: PropTypes.string,\n  genres: PropTypes.arrayOf(PropTypes.string),\n}\n\nexport default Movie;","import React from 'react';\nimport axios from 'axios';\nimport Movie from './Movie';\nimport './Movie.css';\n\nclass MovieList extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isLoading: true,\n      movies: [],\n    }\n  }\n\n  componentDidMount() {\n    this.getMovieData()\n  }\n\n  getMovieData = async () => {\n    const { data: { data: { movies } } } = await axios.get('https://yts.mx/api/v2/list_movies.json')\n    this.setState({\n      movies,\n      isLoading: false,\n    })\n  }\n\n  render() {\n    const { isLoading, movies } = this.state\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loading\">\n            <span className=\"loading__text\">\n              로딩중...\n            </span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(data => (\n              <Movie\n                key={data.id}\n                id={data.id}\n                year={data.year}\n                title={data.title}\n                summary={data.summary}\n                poster={data.medium_cover_image}\n                genres={data.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    )\n  }\n}\n\nexport default MovieList;","import React from 'react';\nimport MovieList from './components/MovieList';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <MovieList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}