{"version":3,"sources":["components/Navigation.js","components/Movie.js","routes/Home.js","routes/About.js","routes/Detail.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","to","Movie","year","title","summary","poster","genres","pathname","state","src","map","genre","idx","key","slice","prototype","id","PropTypes","number","string","arrayOf","Home","props","getMovieData","a","axios","get","movies","data","setState","isLoading","this","medium_cover_image","React","Component","About","Detail","location","history","_","isNil","push","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gRAaeA,G,MATI,WACjB,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,Y,0FCHAC,G,MAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,OAAQC,EAAjC,EAAiCA,OAAjC,OACZ,yBAAKP,UAAU,SACb,kBAAC,IAAD,CAAMC,GAAI,CACRO,SAAU,UACVC,MAAO,CAAEN,OAAMC,QAAOC,UAASC,SAAQC,YAEvC,yBAAKP,UAAU,SACb,yBAAKU,IAAKJ,KAEZ,yBAAKN,UAAU,QACb,4BAAKI,GACL,4BAAKD,GACL,wBAAIH,UAAU,UACXO,GAAUA,EAAOI,KAAI,SAACC,EAAOC,GAAR,OAAgB,wBAAIC,IAAKD,GAAMD,OAEvD,qCAAOP,EAAQU,MAAM,EAAG,KAAxB,aAMRb,EAAMc,UAAY,CAChBC,GAAIC,IAAUC,OACdhB,KAAMe,IAAUC,OAChBf,MAAOc,IAAUE,OACjBf,QAASa,IAAUE,OACnBd,OAAQY,IAAUE,OAClBb,OAAQW,IAAUG,QAAQH,IAAUE,SAGvBlB,QCsBAoB,E,kDAnDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,aAbmB,sBAaJ,8BAAAC,EAAA,sEACgCC,IAAMC,IAAI,0CAD1C,gBACWC,EADX,EACLC,KAAQA,KAAQD,OACxB,EAAKE,SAAS,CACZF,SACAG,WAAW,IAJA,2CAVb,EAAKtB,MAAQ,CACXsB,WAAW,EACXH,OAAQ,IALO,E,gEAUjBI,KAAKR,iB,+BAWG,IAAD,EACuBQ,KAAKvB,MAA3BsB,EADD,EACCA,UAAWH,EADZ,EACYA,OACnB,OACE,6BAAS5B,UAAU,aAChB+B,EACC,yBAAK/B,UAAU,WACb,0BAAMA,UAAU,iBAAhB,0BAKF,yBAAKA,UAAU,UACZ4B,EAAOjB,KAAI,SAAAkB,GAAI,OACd,kBAAC,EAAD,CACEf,IAAKe,EAAKZ,GACVA,GAAIY,EAAKZ,GACTd,KAAM0B,EAAK1B,KACXC,MAAOyB,EAAKzB,MACZC,QAASwB,EAAKxB,QACdC,OAAQuB,EAAKI,mBACb1B,OAAQsB,EAAKtB,kB,GA1CV2B,IAAMC,WCGVC,EAND,WACZ,OACE,sE,iBCoBWC,E,kDApBb,WAAYd,GAAQ,uCACZA,G,gEAGa,IAAD,EACYS,KAAKT,MAA3Be,EADU,EACVA,SAAUC,EADA,EACAA,QACdC,IAAEC,MAAMH,EAAS7B,QACnB8B,EAAQG,KAAK,O,+BAIP,IACAJ,EAAaN,KAAKT,MAAlBe,SACR,OAAIE,IAAEC,MAAMH,EAAS7B,OAAe,KAElC,6BAAM6B,EAAS7B,MAAML,W,GAhBN8B,IAAMC,WCeZQ,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWxB,IACxC,kBAAC,IAAD,CAAOsB,KAAK,SAASE,UAAWV,IAChC,kBAAC,IAAD,CAAOQ,KAAK,UAAUE,UAAWT,MCDnBU,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.36ef645c.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Navigation.css'\n\nconst Navigation = () => {\n  return (\n    <div className=\"nav\">\n      <Link to='/'>HOME</Link>\n      <Link to='/about'>ABOUT</Link>\n    </div>\n  )\n}\n\nexport default Navigation;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './Movie.css';\n\nconst Movie = ({ year, title, summary, poster, genres }) => (\n  <div className=\"movie\">\n    <Link to={{\n      pathname: '/detail',\n      state: { year, title, summary, poster, genres }\n    }}>\n      <div className=\"image\">\n        <img src={poster} />\n      </div>\n      <div className=\"text\">\n        <h3>{title}</h3>\n        <h5>{year}</h5>\n        <ul className=\"genres\">\n          {genres && genres.map((genre, idx) => <li key={idx}>{genre}</li>)}\n        </ul>\n        <p>{`${summary.slice(0, 180)}...`}</p>\n      </div>\n    </Link>\n  </div>\n)\n\nMovie.prototype = {\n  id: PropTypes.number,\n  year: PropTypes.number,\n  title: PropTypes.string,\n  summary: PropTypes.string,\n  poster: PropTypes.string,\n  genres: PropTypes.arrayOf(PropTypes.string),\n}\n\nexport default Movie;","import React from 'react';\nimport axios from 'axios';\nimport Movie from '../components/Movie';\nimport '../components/Movie.css';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isLoading: true,\n      movies: [],\n    }\n  }\n\n  componentDidMount() {\n    this.getMovieData()\n  }\n\n  getMovieData = async () => {\n    const { data: { data: { movies } } } = await axios.get('https://yts.mx/api/v2/list_movies.json')\n    this.setState({\n      movies,\n      isLoading: false,\n    })\n  }\n\n  render() {\n    const { isLoading, movies } = this.state\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loading\">\n            <span className=\"loading__text\">\n              로딩중...\n            </span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(data => (\n              <Movie\n                key={data.id}\n                id={data.id}\n                year={data.year}\n                title={data.title}\n                summary={data.summary}\n                poster={data.medium_cover_image}\n                genres={data.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    )\n  }\n}\n\nexport default Home;","import React from 'react';\n\nconst About = () => {\n  return (\n    <div>React JS Fundamentals Movie App Page</div>\n  )\n}\n\nexport default About;","import React from 'react';\nimport _ from 'lodash';\n\nclass Detail extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n\n  componentDidMount() {\n    const { location, history } = this.props\n    if (_.isNil(location.state)) {\n      history.push('/')\n    }\n  }\n\n  render() {\n    const { location } = this.props\n    if (_.isNil(location.state)) return null\n    return (\n      <div>{location.state.title}</div>\n    )\n  }\n}\n\nexport default Detail;","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport Navigation from './components/Navigation';\nimport Home from './routes/Home';\nimport About from './routes/About';\nimport Detail from './routes/Detail';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/detail\" component={Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}